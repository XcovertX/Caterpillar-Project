generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id                                             BigInt     @id @default(autoincrement())
  street                                         String?    @db.VarChar(100)
  city                                           String?    @db.VarChar(50)
  country                                        String?    @db.VarChar(50)
  customer_customer_billing_address_idToaddress  customer[] @relation("customer_billing_address_idToaddress")
  customer_customer_shipping_address_idToaddress customer[] @relation("customer_shipping_address_idToaddress")
}

model order {
  id                      BigInt   @id @default(autoincrement())
  customer_id             BigInt
  tracking_number         String   @db.VarChar(14)
  purchase_date           DateTime @db.Date
  estimated_delivery_date DateTime @db.Date
  item_quantity           Int
  shipped_from            String   @db.VarChar(255)
  item_id                 BigInt   @unique
  customer                customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tempOrder_customer_id_fkey")
  item                    item     @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tempOrder_item_id_fkey")
}

model customer {
  id                                            BigInt    @id @default(autoincrement())
  first_name                                    String    @db.VarChar(50)
  last_name                                     String    @db.VarChar(50)
  shipping_address_id                           BigInt
  card_id                                       BigInt?
  billing_address_id                            BigInt?
  password                                      String    @db.VarChar(100)
  phone                                         String    @db.VarChar(15)
  email                                         String    @unique @db.VarChar(100)
  user_type                                     String?   @db.VarChar(20)
  created_date                                  DateTime? @db.Date
  address_customer_billing_address_idToaddress  address?  @relation("customer_billing_address_idToaddress", fields: [billing_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tempCustomer_billing_address_id_fkey")
  card_information                              card?     @relation(fields: [card_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tempCustomer_card_id_fkey")
  address_customer_shipping_address_idToaddress address   @relation("customer_shipping_address_idToaddress", fields: [shipping_address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tempCustomer_shipping_address_id_fkey")
  order                                         order[]
}

model card {
  id          BigInt     @id @default(autoincrement())
  card_number BigInt
  card_type   String     @db.VarChar(50)
  customer    customer[]
}

model item {
  id                BigInt  @id @default(autoincrement())
  name              String  @db.VarChar(50)
  price             Float
  manufactured_from String  @db.VarChar(50)
  order_id          BigInt?
  order             order?
}

model admin {
  id         BigInt @id @default(autoincrement())
  first_name String @db.VarChar(50)
  last_name  String @db.VarChar(50)
  password   String @db.VarChar(100)
  email      String @db.VarChar(100)
  user_type  String @db.VarChar(20)
}
